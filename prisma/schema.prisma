// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  firstName       String?
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role           @default(ELEVE)
  accounts        Account[]
  sessions        Session[]
  Etablissement   Etablissement? @relation(fields: [etablissementId], references: [id])
  etablissementId String?
  // Lien vers les classes auxquelles l'utilisateur est associé
  classeUsers     ClasseUser[]
  Cours           Cours[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  PROF
  ELEVE
}

model Etablissement {
  id          String   @id @default(uuid())
  nom         String   @unique
  sousDomaine String   @unique
  users       User[]
  classes     Classe[]
}

model Classe {
  id              String        @id @default(uuid())
  nom             String
  etablissementId String
  etablissement   Etablissement @relation(fields: [etablissementId], references: [id])
  // Lien vers les utilisateurs associés à la classe via le pivot
  classeUsers     ClasseUser[]
  // Lien vers les cours (sections) de la classe
  cours           Cours[]
}

model ClasseUser {
  id          String     @id @default(uuid())
  classeId    String
  userId      String
  // Rôle spécifique dans le contexte de la classe
  roleInClass ClasseRole
  classe      Classe     @relation(fields: [classeId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@unique([classeId, userId])
}

enum ClasseRole {
  ELEVE
  PROF
  SURVEILLANT
  SECRETAIRE
}

model Matiere {
  id    String  @id @default(uuid())
  nom   String
  // Lien vers les cours dans lesquels cette matière est enseignée
  cours Cours[]
}

model Cours {
  id        String @id @default(uuid())
  classeId  String
  matiereId String
  teacherId String // Optionnel, référence à un utilisateur (PROF) qui enseigne ce cours

  classe  Classe  @relation(fields: [classeId], references: [id])
  matiere Matiere @relation(fields: [matiereId], references: [id])
  teacher User?   @relation(fields: [teacherId], references: [id])
}
